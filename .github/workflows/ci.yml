name: CI

on:
  push:
    branches: ["main", "master", "develop"]
  pull_request:

jobs:
  backend:
    runs-on: ubuntu-latest
    env:
      POSTGRES_URL: postgres://postgres:postgres@localhost:5432/tanyai_test?sslmode=disable
      APP_ENV: ci
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tanyai_test
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download modules
        run: go mod download
        working-directory: backend

      - name: Go fmt check
        run: |
          fmt_out=$(gofmt -l .)
          if [ -n "$fmt_out" ]; then
            echo "Go files need formatting:" >&2
            echo "$fmt_out" >&2
            exit 1
          fi
        working-directory: backend

      - name: Go vet
        run: go vet ./...
        working-directory: backend

      - name: Go test
        run: go test ./... -coverprofile=coverage.out
        working-directory: backend

      - name: Go build
        run: go build ./...
        working-directory: backend

      - name: Upload backend coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.out

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Lint
        run: npm run lint
        working-directory: frontend

      - name: Test
        run: npm test -- --run
        working-directory: frontend

      - name: Build
        run: npm run build
        working-directory: frontend

  e2e:
    runs-on: ubuntu-latest
    needs: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Setup Playwright
        run: npx playwright install --with-deps
        working-directory: frontend

      - name: Run e2e tests
        env:
          CI: "1"
        run: npm run test:e2e
        working-directory: frontend

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-e2e-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          if-no-files-found: ignore
